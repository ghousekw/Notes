What scripts are.
The components that make up a script.
How to use variable in your script.
How to perform tests and make decisions.
How to accept command line arguments.
How to accept input from a user.

Scripts:
--------
Contain a series of commands.
An interpreter excutes commands in the script.
Anything you can type at the command line, you can put in a script.
Great for automating tasks.

Simple script:
--------------
#!/bin/bash
echo "Scripting is fun!"
----OUTPUT------
$chmod 755 script.sh
$./script.sh
Scripting is fun

Shebang:
--------
#!/bin/csh
echo "This script uses csh as the interpreter."
--------
#!/bin/ksh
echo "This script uses ksh as the interpreter."
----------
#!/bin/zsh
echo "This script uses zsh as the interpreter."

Example:
--------
sleepy.sh
==========
#!/bin/bash
sleep 90

$ ./sleepy.sh &
[1] 16796

$ ps -fp 16796
$ps -ef | grep 16804 | grep -v grep

$ pstree -p 16804

Shebang or Not to Shebang:
--------------------------
If a script does not contain a shebang the commands are executed using your shell.
You might get lucky.Maybe. Hopefully.
Different sheels have slightly vaarying syntax.

More than just shell scripts:
-----------------------------
#!/usr/bin/python
print "This is a python script."

$chmod 755 hi.py
$ ./hi.py
This is a python script.

Variables:
----------
Storage locations that have a name.
Name-value pairs
Syntax:
  VARIABLE_NAME="Value"
Variables are case sensitive.
By convention variables are uppercase.

variable Usage:
---------------
#!/bin/bash
MY_SHELL="bash"
echo "I like the $MY_SHELL shell."

#!/bin/bash
MY_SHELL="bash"
echo "I like the ${MY_SHELL} shell."

#!/bin/bash
MY_SHELL="bash"
echo "I am ${MY_SHELL}ing on my keyboard."

OUTPUT:
I am bashing on my keyboard.

Assign Command output to a variable:
------------------------------------
#!/bin/bash
SERVER_NAME=$(hostname)
echo "You are running this script on ${SERVER_NAME}."

OUTPUT:
You are running this script on linuxsvr.

#!/bin/bash
SERVER_NAME=`hostname`
echo "You are running this script on ${SERVER_NAME}."

OUTPUT:
You are running this script on linuxsvr.

variable Names:
---------------
Valid:
  FIRST#LETTERS = "ABC"
  FIRST_THREE_LETTERS="ABC"
  firstThreeLetters="ABC"
Invalid:
  3LETTERS="ABC"
  first-three-letters="ABC"
  first@Three@Letters="ABC"

Tests:
------
Syntax:
  [ condition-to-test-for ]
Example:
  [ -e /etc/passwd ]

File operators(tests):
----------------------
-d File True if file is a directory.
-e File True if file exists.
-f File True if file exists and is a regular file.
-r File True if file is readable by you.
-s File True if file exists and is not empty.
-w File True if file is writable by you.
-x File True if file is executable by you.

String operators(tests):
------------------------
-z STRING True if string is empty.
-n STRING True if string is not empty.
STRING1=STRING2
  True if the strings are equal.
STRING1!=STRING2
  True if the strings are not equal.

Arithmetic operators(tests):
----------------------------
arg1-eq arg2 True if arg1 is equal to arg2
arg1-ne arg2 True if arg1 is not equal to arg2

arg1-lt arg2 True if arg1 is less than to arg2
arg1-le arg2 True if arg1 is less than or equal to arg2

arg1-gt arg2 True if arg1 is greater than to arg2
arg1-ge arg2 True if arg1 is greater than or equal to arg2

Making Decisions - The if statement:
------------------------------------
if [ condition-is-true ]
then
  command 1
  command 2
  command N
fi
Ex:
#!/bin/bash
MY_SHELL="bash"

if ["$MY_SHELL" = "bash"]
then
  echo "You seem to like the bash shell."
fi
OUTPUT:
You seem to like the bash shell.

if/else:
--------
if [ condition-is-true ]
then
  command N
else
  command N
fi
Ex:
#!/bin/bash
MY_SHELL="csh"

if ["$MY_SHELL" = "bash"]
then
  echo "You seem to like the bash shell."
else
  echo "You don't seem to like bash shell."
fi

if/elif/else:
--------
if [ condition-is-true ]
then
  command N
elif [ condition-is-true ]
then
  command N
else
  command N
fi

Ex:
#!/bin/bash
MY_SHELL="csh"

if ["$MY_SHELL" = "bash"]
then
  echo "You seem to like the bash shell."
elif ["$MY_SHELL" = "bash"]
then
  echo "You seem to like the csh shell."
else
  echo "You don't seem to like bash or csh shells."
fi

For Loop:
---------
for VARIABLE_NAME in ITEM_1 ITEM_N 
do 
  command 1
  command 2
  command N
done
Ex:
#!/bin/bash
for COLOR in red green blue
do 
  echo "COLOR: $COLOR"
done
OUTPUT:
COLOR: red
COLOR: green
COLOR: blue

Ex:
#!/bin/bash
COLORS = "red green blue"

for COLOR in $COLORS
do 
  echo "COLOR: $COLOR"
done

Ex:
#!/bin/bash
PICTURES = $(ls *jpg)
DATE=$(date +%F)

for PICTURE in $PICTURES
do
  echo "Renaming ${PICTURE} to ${DATE}-${PICTURE}"
  mv ${PICTURE} to ${DATE}-${PICTURE}
done

OUTPUT:
ls 
./rename-pics.sh
ls

Positional Parameters:
----------------------
$ script.sh  parameter1 parameter2 parameter3
$0: "script.sh"
$1: "parameter1"
$2: "parameter2"
$3: "parameter3"

Ex:
#!/bin/bash

echo "Executing script: $0"
echo "Archiving user: $1"

# Lock the account
passwd -1 $1

#create an archive of the home directory
tar cf /archives/${1}.tar.gz /home/${1}

$./archive_user.sh elvis

Ex:
#!/bin/bash

echo "Executing script: $0"
for USER in $@
do
  echo "Archiving user: $USER"

  # Lock the account
  passwd -1 $1

  #create an archive of the home directory
  tar cf /archives/${1}.tar.gz /home/${1}
done

Accepting User Input(STDIN):
----------------------------
The read command accepts STDIN.

Syntax:
  read -p "PROMPT" VARIABLE

Ex:
#!/bin/bash

read -p "Enter a user name: " USER
echo "Archiving user: $USER"

#lock the account
passwd -l $USER

#create an archive of the home directory.
tar cf /archives/${USER}.tar.gz /home/${USER}

OUTPUT:
./archive_user.sh
